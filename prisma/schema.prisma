// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id              String    @id @default(cuid())
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  username        String    @unique @db.VarChar(30)
  name            String?   @db.VarChar(30)
  bio             String?
  gender          Gender?
  birthday        DateTime? @db.Date
  email           String    @unique
  emailVerified   DateTime?
  image           String?   @db.VarChar(2048)
  password        String    @db.VarChar(200)
  status          Status    @default(ACTIVE)
  role            Role?     @default(USER)
  socialMediaInfo Json?
  locale          String?   @db.VarChar(30)
  accounts        Account[]
  sessions        Session[]
  photos          Photo[]
  likes           Like[]
  comments        Comment[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Photo {
  id                         Int                      @id @default(autoincrement())
  createdAt                  DateTime                 @default(now())
  updatedAt                  DateTime                 @updatedAt
  url                        String                   @db.VarChar(2048)
  title                      String?
  description                String?
  focalLength                Int?
  status                     Status                   @default(ACTIVE)
  ISO                        Int?
  EXIF                       Json?
  shotAt                     DateTime?
  isNsfw                     Boolean                  @default(false)
  user                       User                     @relation(fields: [userId], references: [id])
  userId                     String                   @unique
  country                    Country                  @relation(fields: [countryId], references: [id])
  countryId                  Int                      @unique
  administrativeDivision     AdministrativeDivision   @relation(fields: [administrativeDivisionId], references: [id])
  administrativeDivisionId   Int                      @unique
  spot                       Spot                     @relation(fields: [spotId], references: [id])
  spotId                     Int                      @unique
  likes                      Like[]
  comments                   Comment[]
}

model AdministrativeDivision {
  id          Int       @id @default(autoincrement())
  parentId    Int
  photoUrl    String?   @db.VarChar(2048)
  country     Country   @relation(fields: [countryId], references: [id])
  countryId   Int       @unique
  photos      Photo[]
  spots       Spot[]
}

model Spot {
  id                        Int                      @id @default(autoincrement())
  name                      String                   @db.VarChar(100)
  administrativeDivision    AdministrativeDivision   @relation(fields: [administrativeDivisionId], references: [id])
  administrativeDivisionId  Int                      @unique
  photos      Photo[]
}

model Country {
  id                      Int                      @id @default(autoincrement())
  countryCode             CountryCode
  photos                  Photo[]
  administrativeDivisions AdministrativeDivision[]
}

model Like {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
  photo     Photo    @relation(fields: [photoId], references: [id])
  photoId   Int      @unique
}

model Comment {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
  photo     Photo    @relation(fields: [photoId], references: [id])
  photoId   Int      @unique
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum Role {
  USER
  ADMIN
}

enum Status {
  ACTIVE
  INACTIVE
}

enum CountryCode {
  TW
}
